#Использовать asserts
#Использовать fs
#Использовать json
#Использовать logos

// Для хранения статуса соединения
Перем Открыт;

Перем ПарсерJSON;
Перем БазовыйКаталог;
Перем ХранилищеВПамяти;

Перем Лог;

// Конструктор объекта АбстрактныйКоннектор.
//
Процедура ПриСозданииОбъекта()
	
	Открыт = Ложь;
	Лог = Логирование.ПолучитьЛог("oscript.lib.entity.connector.json");
	ПарсерJSON = Новый ПарсерJSON;

КонецПроцедуры

// Открыть соединение с БД.
//
// Параметры:
//   СтрокаСоединения - Строка - Строка соединения с БД.
//   ПараметрыКоннектора - Массив - Дополнительные параметры инициализиации коннектора.
//
Процедура Открыть(СтрокаСоединения, ПараметрыКоннектора) Экспорт
	Открыт = Истина;
	Лог.Отладка("Открытие коннектора со строкой соединения %1", СтрокаСоединения);
	Ожидаем.Что(ФС.КаталогСуществует(СтрокаСоединения), "Существует каталог для выгрузки данных сущностей");
КонецПроцедуры

// Закрыть соединение с БД.
//
Процедура Закрыть() Экспорт
	Открыт = Ложь;
КонецПроцедуры

// Получить статус соединения с БД.
//
//  Возвращаемое значение:
//   Булево - Состояние соединения. Истина, если соединение установлено и готово к использованию.
//       В обратном случае - Ложь.
//
Функция Открыт() Экспорт
	Возврат Открыт;
КонецФункции

// Начинает новую транзакцию в БД.
//
Процедура НачатьТранзакцию() Экспорт
	ВызватьИсключение "Не поддерживается";
КонецПроцедуры

// Фиксирует открытую транзакцию в БД.
//
Процедура ЗафиксироватьТранзакцию() Экспорт
	ВызватьИсключение "Не поддерживается";
КонецПроцедуры

// Отменяет открытую транзакцию в БД.
//
Процедура ОтменитьТранзакцию() Экспорт
	ВызватьИсключение "Не поддерживается";
КонецПроцедуры

// Создает таблицу в БД по данным модели.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//
Процедура ИнициализироватьТаблицу(ОбъектМодели) Экспорт
	ИмяФайла = ОбъединитьПути(БазовыйКаталог, ОбъектМодели.ИмяТаблицы()) + ".json";
	Если НЕ ФС.Существует(ИмяФайла) Тогда
		Лог.Отладка("Инициализация таблицы %1", ОбъектМодели.ИмяТаблицы());
		Таблица = Новый Соответствие;
		ЗаписатьОбъектВФайл(Таблица, ИмяФайла);
	КонецЕсли;
КонецПроцедуры

// Сохраняет сущность в БД.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Сущность - Произвольный - Объект (экземпляр класса, зарегистрированного в модели) для сохранения в БД.
//
Процедура Сохранить(ОбъектМодели, Сущность) Экспорт
	ИмяФайла = ОбъединитьПути(БазовыйКаталог, ОбъектМодели.ИмяТаблицы()) + ".json";
	Таблица = ПрочитатьОбъектИзФайла(ИмяФайла);

	Идентификатор = ОбъектМодели.ПолучитьЗначениеИдентификатора(Сущность);
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		// TODO: Автовычисление идентификатора	
	КонецЕсли;
	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		Идентификатор = Формат(Идентификатор, "ЧГ=");
	КонецЕсли;
	
	Таблица.Вставить(Идентификатор, РазложитьОбъектВСоответствие(Сущность, ОбъектМодели));
	ЗаписатьОбъектВФайл(Таблица, ИмяФайла, ОбъектМодели);
КонецПроцедуры

// Получает значения колонок указанного объекта модели из таблицы БД.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Идентификатор - Произвольный - Идентификатор объекта. Тип значения зависит от используемого типа поля
//       с аннотацией &Идентификатор.
//
//  Возвращаемое значение:
//   Соответствие - Набор значений колонок найденного объекта.
//
Функция ПолучитьЗначенияКолонокСущности(ОбъектМодели, Знач Идентификатор) Экспорт

	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		Идентификатор = Формат(Идентификатор, "ЧГ=");
	КонецЕсли;

	ИмяФайла = ОбъединитьПути(БазовыйКаталог, ОбъектМодели.ИмяТаблицы()) + ".json";
	Таблица = ПрочитатьОбъектИзФайла(ИмяФайла);
	Объект = Таблица.Получить(Идентификатор);

	ЗначенияКолонок = Новый Соответствие;
	Для Каждого Колонка Из ОбъектМодели.Колонки() Цикл
		ЗначенияКолонок.Вставить(Колонка.ИмяКолонки, Объект.Получить(Колонка.ИмяКолонки));
	КонецЦикла;
	Возврат ЗначенияКолонок;
КонецФункции

Процедура ЗаписатьОбъектВФайл(Значение, ИмяФайла, ОбъектМодели = Неопределено)
	ТекстJSON = ПарсерJSON.ЗаписатьJSON(Значение);
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "UTF-8");
	ЗаписьТекста.Записать(ТекстJSON);
	ЗаписьТекста.Закрыть();
КонецПроцедуры

Функция РазложитьОбъектВСоответствие(Значение, ОбъектМодели)
	Соответствие = Новый Соответствие;
	Для Каждого Колонка Из ОбъектМодели.Колонки() Цикл
		ЗначениеПараметра = ОбъектМодели.ПолучитьПриведенноеЗначениеПоля(Значение, Колонка.ИмяПоля);
		Соответствие.Вставить(Колонка.ИмяКолонки, ЗначениеПараметра);
	КонецЦикла;

	Возврат Соответствие;
КонецФункции

Функция ПрочитатьОбъектИзФайла(ИмяФайла)
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, "UTF-8");
	ТекстJSON = ЧтениеТекста.Прочитать();
	Объект = ПарсерJSON.ПрочитатьJSON(ТекстJSON);
	ЧтениеТекста.Закрыть();
	Возврат Объект;
КонецФункции
